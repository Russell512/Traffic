import numpy as np

def social_force(distance):
    f = 0.5  # Intensity of attraction
    l = 1.5  # Attractive length scale
    return f * np.exp(-distance / l) - np.exp(-distance)

def calculate_social_interaction(grasshoppers):
    N, D = grasshoppers.shape
    social_interaction = np.zeros((N, D))

    for d in range(D):
        for i in range(N):
            for j in range(N):
                if i != j:
                    distance = np.abs(grasshoppers[i, d] - grasshoppers[j, d])
                    unit_vector = (grasshoppers[j, d] - grasshoppers[i, d]) / (distance + 1e-10)  # Avoid division by zero
                    social_interaction[i, d] += social_force(distance) * unit_vector

    return social_interaction

# Initialize population of grasshoppers with random positions in a 30-dimensional space
N = 10  # Number of grasshoppers
D = 30  # Number of dimensions
grasshoppers = np.random.rand(N, D)

# Calculate social interaction force
social_interaction_force = calculate_social_interaction(grasshoppers)

print("Social Interaction Force:\n", social_interaction_force)
